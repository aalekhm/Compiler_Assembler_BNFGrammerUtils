#include "TinyCReader.h"
#include "GrammerUtils.h"

#define __START_BLOCK_STRING__(_BLOCKNAME_) \
	updateBlockString(_BLOCKNAME_); \
	startBlockMarker(); \

#define __CURRENT_BLOCK_NODE__(__node__) \
	if(m_pASTCurrentBlockNode != nullptr) \
			m_pASTPrevBlockNode = m_pASTCurrentBlockNode; \
	m_pASTCurrentBlockNode = __node__; \

#define __RESET_BLOCK_NODE__ \
	m_pASTCurrentBlockNode = m_pASTPrevBlockNode; \
	m_pASTPrevBlockNode = nullptr; \

#define __END_CURRENT_BLOCK__ \
	removeLastFromBlockString(); \
	endBlockMarker(); \

#define __START_INTERFACE__ 										m_bInterfaceInProcess = true;
#define __END_INTERFACE__ 											m_bInterfaceInProcess = false;
										
#define __START_STRUCT__ 											m_bStructInProcess = true;
#define __END_STRUCT__ 												m_bStructInProcess = false;
									
#define __START_FUNCTION__ 											m_bFunctionInProcess = true;
#define __END_FUNCTION__ 											m_bFunctionInProcess = false;
									
#define SAVE_CURRENT_TOKEN											GrammerUtils::m_pSavedToken = GrammerUtils::m_pToken;
#define SAVE_PREV_TOKEN												GrammerUtils::m_pSavedToken = GrammerUtils::m_pPrevToken;

#define SAVED_TOKEN 												GrammerUtils::m_pSavedToken
#define SAVED_TOKEN_TEXT 											GrammerUtils::m_pSavedToken.getText()
#define PREV_TOKEN 													GrammerUtils::m_pPrevToken
#define PREV_TOKEN_TEXT 											GrammerUtils::m_pPrevToken.getText()

#define GET_INFO_FOR_KEY(__node__, __key__)							__node__->getAdditionalInfoFor(__key__)
#define SET_INFO_FOR_KEY(__node__, __key__, __info__)				__node__->setAdditionalInfo(__key__, __info__)
#define APPEND_INFO_FOR_KEY(__node__, __key__, __appendValue__)		__node__->appendAdditionalInfo(__key__, __appendValue__)
	
TinyCReader::TinyCReader()
	: m_bStructInProcess(false)
	, m_bFunctionInProcess(false)
	, m_bInterfaceInProcess(false)
	, m_pASTRootNode(nullptr)
	, m_pASTCurrentNode(nullptr)
	, m_pASTCurrentBlockNode(nullptr)
	, m_pASTPrevBlockNode(nullptr)
{
	GrammerUtils::init();
}

void TinyCReader::read(const char* sFile)
{
	//////////////// THIS PIECE OF CODE WILL REMAIN COMMON FOR ALL //////////////////
	if (GrammerUtils::read(sFile))
	{
		addKeywords();
		GrammerUtils::getNextToken();

		m_pASTRootNode = new Tree();
		{
			m_pASTRootNode->m_eASTNodeType = ASTNodeType::ASTNode_ROOT;
			m_pASTCurrentNode = m_pASTRootNode;
		}

		def();

		GrammerUtils::generateCode(m_pASTRootNode);
	}
	/////////////////////////////////////////////////////////////////////////////////
}

std::string TinyCReader::popOperator()
{
	if(!m_vOperatorStack.empty())
	{
		std::string sTop = m_vOperatorStack.top();
		m_vOperatorStack.pop();
		
		return sTop;
	}
	
	return "";
}

ENUM_OP_PRECEDENCE TinyCReader::opFromString(std::string sOperator)
{
	ENUM_OP_PRECEDENCE eOperator = ENUM_OP_PRECEDENCE::OP_INVALID;

	if (sOperator == "||")
		eOperator = ENUM_OP_PRECEDENCE::OP_LOGICALOR;
	else
	if (sOperator == "&&")
		eOperator = ENUM_OP_PRECEDENCE::OP_LOGICALAND;
	else
	if (sOperator == "|")
		eOperator = ENUM_OP_PRECEDENCE::OP_BITWISEOR;
	else
	if (sOperator == "&")
		eOperator = ENUM_OP_PRECEDENCE::OP_BITWISEAND;
	else
	if (sOperator == "^")
		eOperator = ENUM_OP_PRECEDENCE::OP_BITWISEXOR;
	else
	if (sOperator == "~")
		eOperator = ENUM_OP_PRECEDENCE::OP_BITWISENOT;
	else
	if (sOperator == "<<")
		eOperator = ENUM_OP_PRECEDENCE::OP_BITWISELEFTSHIFT;
	else
	if (sOperator == ">>")
		eOperator = ENUM_OP_PRECEDENCE::OP_BITWISERIGHTSHIFT;
	else
	if (sOperator == "==")
		eOperator = ENUM_OP_PRECEDENCE::OP_EQ;
	else
	if (sOperator == "!=")
		eOperator = ENUM_OP_PRECEDENCE::OP_NEQ;
	else
	if (sOperator == "<")
		eOperator = ENUM_OP_PRECEDENCE::OP_LT;
	else
	if (sOperator == "<=")
		eOperator = ENUM_OP_PRECEDENCE::OP_LTEQ;
	else
	if (sOperator == ">")
		eOperator = ENUM_OP_PRECEDENCE::OP_GT;
	else
	if (sOperator == ">=")
		eOperator = ENUM_OP_PRECEDENCE::OP_GTEQ;
	else
	if (sOperator == "+")
		eOperator = ENUM_OP_PRECEDENCE::OP_ADD;
	else
	if (sOperator == "-")
		eOperator = ENUM_OP_PRECEDENCE::OP_SUB;
	else
	if (sOperator == "*")
		eOperator = ENUM_OP_PRECEDENCE::OP_MUL;
	else
	if (sOperator == "/")
		eOperator = ENUM_OP_PRECEDENCE::OP_DIV;
	else
	if (sOperator == "(")
		eOperator = ENUM_OP_PRECEDENCE::OP_LPAREN;
	else
	if (sOperator == ")")
		eOperator = ENUM_OP_PRECEDENCE::OP_RPAREN;
	else
	if (sOperator == "%%")
		eOperator = ENUM_OP_PRECEDENCE::OP_MOD;
	else
	if (sOperator == "!")
		eOperator = ENUM_OP_PRECEDENCE::OP_NOT;
	else
	if (sOperator == "NEGATE")
		eOperator = ENUM_OP_PRECEDENCE::OP_NEGATE;

	return eOperator;
}

void TinyCReader::checkOpPrecedenceAndPush(std::string sCurrentOperator)
{
	if(m_vOperatorStack.empty()) m_vOperatorStack.push(sCurrentOperator);
	else
	{
		if (sCurrentOperator == ")")
		{
			while (NOT m_vOperatorStack.empty())
			{
				std::string sOp = m_vOperatorStack.top();
				popOperator();

				if (sOp != "(")
				{	
					m_vPostFix.push_back(sOp);
				}
				else
				{
					break;
				}
			}
		}
		else
		{
			if (sCurrentOperator == "(")
			{
				m_vOperatorStack.push(sCurrentOperator);
			}
			else
			{
				int eCurrOp = (int)opFromString(sCurrentOperator);

				std::string sTopOfStack = m_vOperatorStack.top();
				int eTopOfStack = (int)opFromString(sTopOfStack);

				if (eCurrOp > eTopOfStack)
					m_vOperatorStack.push(sCurrentOperator);
				else
				{
					popOperator();
					m_vPostFix.push_back(sTopOfStack);
					m_vOperatorStack.push(sCurrentOperator);
				}
			}
		}
	}
}

Tree* TinyCReader::createPostFixExpr(Tree* pLeaf /* = nullptr*/)
{
	if (!m_vOperatorStack.empty())
	{
		std::string sTop = m_vOperatorStack.top();
		while (NOT(m_vOperatorStack.empty() || sTop == "_START_"))
		{
			m_vPostFix.push_back(sTop);
			m_vOperatorStack.pop();

			if (NOT m_vOperatorStack.empty())
				sTop = m_vOperatorStack.top();
		}

		if (sTop == "_START_")
			m_vOperatorStack.pop();
	}

	std::string sPostFixExpr = "";

	int iSize = m_vPostFix.size(), i = 0, iStartPos = 0;
	while (i < iSize)
	{
		if (m_vPostFix[i] == "_START_")
		{
			iStartPos = i + 1;
		}
		i++;
	}

	for (int i = iStartPos; i < iSize; i++)
	{
		sPostFixExpr += m_vPostFix[i];
		if (i < iSize - 1)
			sPostFixExpr += ", ";
	}

	if (iStartPos >= 1)
	{
		iStartPos--;
		while (iStartPos != m_vPostFix.size())
		{
			m_vPostFix.erase(m_vPostFix.begin() + iStartPos);
		}
	}
	else
		m_vPostFix.clear();

	if (pLeaf == nullptr)
		pLeaf = makeLeaf(ASTNodeType::ASTNode_EXPRESSION, sPostFixExpr.c_str());
	else
		pLeaf->setAdditionalInfo("text", sPostFixExpr);

	return pLeaf;
}


Tree* TinyCReader::makeLeaf(ASTNodeType eASTNodeType, const char* sText)
{
	Tree* pLeaf = new Tree();
	{
		pLeaf->m_eASTNodeType = eASTNodeType;
		pLeaf->setAdditionalInfo("text", sText);
	}

	return pLeaf;
}

Tree* TinyCReader::makeNode(ASTNodeType eASTNodeType, Tree* pLeft, Tree* pRight)
{
	Tree* pNode = new Tree();
	{
		pNode->m_eASTNodeType = eASTNodeType;
		pNode->m_pLeftNode = pLeft;
		pNode->m_pRightNode = pRight;
	}

	return pNode;
}

void TinyCReader::updateBlockString(std::string sIdent)
{
	if (NOT sIdent.empty())
	{
		m_sBlockStringList.push_back(sIdent);
	}
}

std::string TinyCReader::getBlockString()
{
	std::string sReturn;
	for (std::string sStr : m_sBlockStringList)
	{
		sReturn.append(sStr);
		sReturn.append("_");
	}

	return sReturn;
}

void TinyCReader::removeLastFromBlockString()
{
	if (m_sBlockStringList.size() > 0)
	{
		m_sBlockStringList.erase(m_sBlockStringList.end()-1);
	}
}

std::string	TinyCReader::getFullyQualifiedNameForVariable(Tree* pNode, std::string sVariable)
{
	std::string sFullyQualifiedName;
	bool bFound = false;

	if (NOT bFound)
	{
		for (Tree* pChild : pNode->m_vStatements)
		{
			if (pChild->m_eASTNodeType == ASTNodeType::ASTNode_TYPE
				|
				pChild->m_eASTNodeType == ASTNodeType::ASTNode_TYPEARRAY
				|
				pChild->m_eASTNodeType == ASTNodeType::ASTNode_TYPESTRUCT
				) {
				if (pChild->m_sAdditionalInfo == sVariable)
				{
					sFullyQualifiedName = pChild->getAdditionalInfoFor("text");
					bFound = true;
					break;
				}
			}
		}
	}

	if (NOT bFound)
	{
		for (Tree* pStaticVar : FunctionInfo::m_vStaticVariables)
		{
			if (pStaticVar->getAdditionalInfoFor("text") == sVariable)
			{
				sFullyQualifiedName = pStaticVar->getAdditionalInfoFor("text");
				bFound = true;
				break;
			}
		}
	}

	// Check for 'Member Variables'
	if (NOT bFound)
	{
		Tree* pStructNode = pNode->m_pParentNode;
LABEL_STRUCT_INFO:
		if (pStructNode->m_eASTNodeType == ASTNodeType::ASTNode_STRUCTDEF)
		{
			// 1. Check if its a Member Variable of the 'Struct'
			for (Tree* pChildNode : pStructNode->m_vStatements) // Starts with index 0
			{
				if (pChildNode->m_eASTNodeType == ASTNodeType::ASTNode_TYPE
					||
					pChildNode->m_eASTNodeType == ASTNodeType::ASTNode_TYPEARRAY
					) {
					if (pChildNode->m_sAdditionalInfo == sVariable)
					{
						sFullyQualifiedName = pChildNode->getAdditionalInfoFor("text");
						bFound = true;
						break;
					}
				}
			}

			// 2. Check if its a Member Variable of the Parent 'Struct'
			if (NOT bFound)
			{
				std::string sStructParentName = GET_INFO_FOR_KEY(pStructNode, "extends");
				if (NOT sStructParentName.empty())
				{
					pStructNode = getStructNodeByName(sStructParentName);
					goto LABEL_STRUCT_INFO;
				}
			}
		}

	}

	if (sFullyQualifiedName.empty())
	{
		if (pNode->m_eASTNodeType == ASTNodeType::ASTNode_FUNCTIONDEF)
		{
			sFullyQualifiedName = getFullyQualifiedNameForVariable(pNode->m_pRightNode, sVariable); // Search in the 'Arg list'.
		}
		else
		{
			sFullyQualifiedName = getFullyQualifiedNameForVariable(pNode->m_pParentNode, sVariable);
		}
	}

	return sFullyQualifiedName;
}


void TinyCReader::addType(std::string sType)
{
	GrammerUtils::m_vTypes.push_back(sType);
}

bool TinyCReader::isValidType(std::string sType)
{
	for(std::string sInBuiltType : GrammerUtils::m_vTypes)
	{
		if(sType == sInBuiltType)
		{
			GrammerUtils::m_pPrevToken = GrammerUtils::m_pToken;
			GrammerUtils::getNextToken();

			return true;
		}
	}
	
	return false;
}

void TinyCReader::addStructType(std::string sType)
{
	GrammerUtils::m_vUserDefinedTypes.push_back(sType);
}

bool TinyCReader::isValidStructType(std::string sType)
{
	for(std::string sInBuiltType : GrammerUtils::m_vUserDefinedTypes)
	{
		if(sType == sInBuiltType)
		{
			GrammerUtils::m_pPrevToken = GrammerUtils::m_pToken;
			GrammerUtils::getNextToken();

			return true;
		}
	}
	
	return false;
}

void TinyCReader::addInterfaceType(std::string sType)
{
	GrammerUtils::m_vUserDefinedInterfaces.push_back(sType);
}

bool TinyCReader::isValidInterfaceType(std::string sType)
{
	for(std::string sInBuiltInterface : GrammerUtils::m_vUserDefinedInterfaces)
	{
		if(sType == sInBuiltInterface)
		{
			GrammerUtils::m_pPrevToken = GrammerUtils::m_pToken;
			GrammerUtils::getNextToken();

			return true;
		}
	}
	
	return false;
}

Tree* TinyCReader::hasNodeOfType(Tree* pNode, ASTNodeType eASTNodeType)
{
	Tree* pReturnNode = nullptr;
	if (pNode != nullptr)
	{
		for (Tree* pChild : pNode->m_vStatements)
		{
			if (pChild != nullptr)
			{
				if (pChild->m_eASTNodeType == eASTNodeType)
				{
					pReturnNode = pChild;
					break;
				}
			}
		}
	}

	return pReturnNode;
}

void TinyCReader::startBlockMarker()
{
	m_vLocalHeapVarStack.push("{");
}

void TinyCReader::pushLocalHeapVar(std::string sVariableName)
{
	if (NOT sVariableName.empty())
	{
		m_vLocalHeapVarStack.push(sVariableName);
	}
}

void TinyCReader::endBlockMarker()
{
	while (NOT m_vLocalHeapVarStack.empty())
	{
		std::string sLocalHeapVar = m_vLocalHeapVarStack.top();
		m_vLocalHeapVarStack.pop();
		if (sLocalHeapVar == "{")
		{
			break;
		}
		else
		{
			Tree* pFreeASTNode = GrammerUtils::createNodeOfType(ASTNodeType::ASTNode_FREE, sLocalHeapVar.c_str());
			if (pFreeASTNode != nullptr)
			{
				m_pASTCurrentNode->addChild(pFreeASTNode);
			}
		}
	}
}

E_VARIABLESCOPE TinyCReader::getCurrentScope()
{
	E_VARIABLESCOPE eCurrentScope = E_VARIABLESCOPE::INVALID;
	if (m_bStructInProcess)
	{
		if (m_bFunctionInProcess)
		{
			eCurrentScope = E_VARIABLESCOPE::LOCAL;
		}
		else
		{
			eCurrentScope = E_VARIABLESCOPE::MEMBER;
		}
	}
	else
	{
		if (m_bFunctionInProcess)
		{
			eCurrentScope = E_VARIABLESCOPE::LOCAL;
		}
		else
		{
			eCurrentScope = E_VARIABLESCOPE::STATIC;
		}
	}

	return eCurrentScope;
}

std::string TinyCReader::getCurrentScopeString()
{
	return toString(getCurrentScope());
}

Tree* TinyCReader::getStructNodeByName(std::string sStructName)
{
	for (Tree* pStruct : m_vStructs)
	{
		if (GET_INFO_FOR_KEY(pStruct, "text") == sStructName)
		{
			return pStruct;
		}
	}

	assert(false);
}

void TinyCReader::handleFunctionCallInExpr(std::string sFunctionType)
{
	// The idea here is to create a temporary variable of the type returned by the function
	// & add it before the expression statement.
	// The temporary variable is then inserted in the expression.
	// Eg:
	// 		int32_t iRet = 10;
	//		iRet = 10 + retFunc(); // where retFunc return type is "int32_t".
	//		This will create a dummy code as follows:
	//			int32_t iRet = 10;
	//			int32_t iRet_retFunc = retFunc();	// This line of code will be inserted by the following piece of code.
	//			iRet = 10 + iRet_retFunc;
	
	Tree* pExpressionNode = m_pASTCurrentNode;
	Tree* pAssignNode = pExpressionNode->m_pParentNode;
	Tree* pFunctionCallNode = pExpressionNode->getLastStatement();
	{
		pFunctionCallNode->removeFromParent();
	}
	assert(pFunctionCallNode != nullptr);
	{
		char sUniqueFuncName[255] = {};
		sprintf_s(sUniqueFuncName, "%%u", pFunctionCallNode);
	
		std::string sFuncName = GET_INFO_FOR_KEY(pFunctionCallNode, "text");
		std::string sFullyQualifiedTempVariableName;
		sFullyQualifiedTempVariableName.append( GET_INFO_FOR_KEY(pAssignNode, "text") );
		sFullyQualifiedTempVariableName.append("_");
		sFullyQualifiedTempVariableName.append(sFuncName);
		sFullyQualifiedTempVariableName.append("_");
		sFullyQualifiedTempVariableName.append(sUniqueFuncName);
		
		Tree* pPrimIntNode = makeLeaf(ASTNodeType::ASTNode_TYPE, sFullyQualifiedTempVariableName.c_str());
		{
			GrammerUtils::m_vUserDefinedVariables.push_back(sFullyQualifiedTempVariableName);
			GrammerUtils::m_vUserDefinedVariables.push_back(sFuncName);

			pPrimIntNode->m_sAdditionalInfo.append(sFullyQualifiedTempVariableName);
			SET_INFO_FOR_KEY(pPrimIntNode, "givenName", sFuncName);
			if (NOT sFunctionType.empty())
			{
				SET_INFO_FOR_KEY(pPrimIntNode, "modifyType", sFunctionType.c_str());
			}
			SET_INFO_FOR_KEY(pPrimIntNode, "type", "int32_t");
			SET_INFO_FOR_KEY(pPrimIntNode, "scope", getCurrentScopeString());
			m_pASTCurrentBlockNode->addChild(pPrimIntNode);
		}
		
		Tree* pExpressionLeftLeaf = makeLeaf(ASTNodeType::ASTNode_EXPRESSION, "");
		{
			pPrimIntNode->m_pLeftNode = pExpressionLeftLeaf;
			pExpressionLeftLeaf->m_pParentNode = pPrimIntNode;
			pExpressionLeftLeaf->addChild(pFunctionCallNode);
		}
		
		m_vPostFix.push_back(sFullyQualifiedTempVariableName);
	}
}

void TinyCReader::clearTopOfExpressionStack()
{
	int32_t iPostFixSize = m_vPostFix.size();
	if (iPostFixSize > 0)
	{
		if (iPostFixSize == 1 && m_vPostFix[0] == "_START_")
			m_vPostFix.clear();
		else
		if (m_vPostFix[iPostFixSize - 1] == "_START_")
			m_vPostFix.erase(m_vPostFix.begin() + iPostFixSize - 1);
	}

	if (m_vOperatorStack.size() > 0 && m_vOperatorStack.top() == "_START_")
		m_vOperatorStack.pop();
}